{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._url = options.url;\n    this._headers = options.headers;\n  }\n\n  initData() {\n    return Promise.all([this.addCard(), this.getUserInfo()]);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  setUserInfo(newName, newAbout) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: newName,\n        about: newAbout\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  addCard(name, image) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: image\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  updateAvatarImage(imageUrl) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: imageUrl\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  addLike(cardId) {\n    return fetch(`${this._url}/cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  removeLike(cardId) {\n    return fetch(`${this._url}/cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n}\n\nconst api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-20',\n  headers: {\n    authorization: '525a9253-bff1-4ef9-85d2-df3d4a503fec',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["C:/Users/milka/mesto-react/mesto-react/src/utils/api.js"],"names":["Api","constructor","options","_url","url","_headers","headers","initData","Promise","all","addCard","getUserInfo","getInitialCards","fetch","then","res","ok","json","reject","status","setUserInfo","newName","newAbout","method","body","JSON","stringify","name","about","image","link","deleteCard","cardId","updateAvatarImage","imageUrl","avatar","addLike","removeLike","api","authorization"],"mappings":"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","sourcesContent":["class Api {\r\n  constructor(options) {\r\n      this._url = options.url;\r\n      this._headers = options.headers;\r\n  }\r\n\r\n  initData() {\r\n    return Promise.all([this.addCard(), this.getUserInfo()]);\r\n  }\r\n\r\n\r\n  getInitialCards() {\r\n      return fetch(`${this._url}/cards`, {\r\n              headers: this._headers\r\n          })\r\n          .then(res => {\r\n              if (res.ok) {\r\n                  return res.json();\r\n              }\r\n              return Promise.reject(`Ошибка: ${res.status}`);\r\n          })\r\n  }\r\n\r\n  getUserInfo() {\r\n      return fetch(`${this._url}/users/me`, {\r\n              headers: this._headers\r\n          })\r\n          .then(res => {\r\n              if (res.ok) {\r\n                  return res.json();\r\n              }\r\n              return Promise.reject(`Ошибка: ${res.status}`);\r\n          })\r\n  }\r\n\r\n  setUserInfo(newName, newAbout) {\r\n      return fetch(`${this._url}/users/me`, {\r\n              method: 'PATCH',\r\n              headers: this._headers,\r\n              body: JSON.stringify({\r\n                  name: newName,\r\n                  about: newAbout\r\n              })\r\n          })\r\n          .then(res => {\r\n              if (res.ok) {\r\n                  return res.json();\r\n              }\r\n              return Promise.reject(`Ошибка: ${res.status}`);\r\n          })\r\n  }\r\n\r\n  addCard(name, image) {\r\n      return fetch(`${this._url}/cards`, {\r\n              method: 'POST',\r\n              headers: this._headers,\r\n              body: JSON.stringify({\r\n                  name: name,\r\n                  link: image\r\n              })\r\n\r\n          })\r\n          .then(res => {\r\n              if (res.ok) {\r\n                  return res.json();\r\n              }\r\n              return Promise.reject(`Ошибка: ${res.status}`);\r\n          })\r\n\r\n  }\r\n  deleteCard(cardId) {\r\n      return fetch(`${this._url}/cards/${cardId}`, {\r\n              method: 'DELETE',\r\n              headers: this._headers,\r\n\r\n          })\r\n          .then(res => {\r\n              if (res.ok) {\r\n                  return res.json();\r\n              }\r\n              return Promise.reject(`Ошибка: ${res.status}`);\r\n          })\r\n  }\r\n  updateAvatarImage(imageUrl) {\r\n      return fetch(`${this._url}/users/me/avatar`, {\r\n              method: 'PATCH',\r\n              headers: this._headers,\r\n              body: JSON.stringify({\r\n                  avatar: imageUrl\r\n              })\r\n          })\r\n          .then(res => {\r\n              if (res.ok) {\r\n                  return res.json();\r\n              }\r\n              return Promise.reject(`Ошибка: ${res.status}`);\r\n          })\r\n  }\r\n  addLike(cardId) {\r\n      return fetch(`${this._url}/cards/likes/${cardId}`, {\r\n              method: 'PUT',\r\n              headers: this._headers,\r\n\r\n          })\r\n          .then(res => {\r\n              if (res.ok) {\r\n                  return res.json();\r\n              }\r\n              return Promise.reject(`Ошибка: ${res.status}`);\r\n          })\r\n  }\r\n  removeLike(cardId) {\r\n      return fetch(`${this._url}/cards/likes/${cardId}`, {\r\n              method: 'DELETE',\r\n              headers: this._headers,\r\n\r\n          })\r\n          .then(res => {\r\n              if (res.ok) {\r\n                  return res.json();\r\n              }\r\n              return Promise.reject(`Ошибка: ${res.status}`);\r\n          })\r\n  }\r\n\r\n}\r\n\r\nconst api = new Api({\r\n    url: 'https://mesto.nomoreparties.co/v1/cohort-20',\r\n    headers: {\r\n      authorization: '525a9253-bff1-4ef9-85d2-df3d4a503fec',\r\n      'Content-Type': 'application/json'\r\n    }\r\n  });\r\nexport default api"]},"metadata":{},"sourceType":"module"}